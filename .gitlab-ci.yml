stages:
  - lint
  - build
  - publish

.base_gh_ssh_agent:
  before_script:
    ## _Inspired by https://docs.gitlab.com/ee/ci/ssh_keys/_
    ##
    ## Install ssh-agent if not already installed.
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    ## Run ssh-agent
    - eval $(ssh-agent -s)
    ## Add the private key file to ssh-agent
    - echo "$GH_REPO_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Using the set $SSH_KNOWN_HOSTS to be able to verify remote servers public keys
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

image: node:18

# Cache modules in between jobs
cache:
  key:
    files:
      - package-lock.json
  paths:
    - .npm/

licenses_checker:
  stage: build
  needs: []
  image: registry.gitlab.com/ai-r/cogment/license-checker:latest
  script:
    - license-checker

build:
  stage: build
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
  except:
    # build is included in the npm run deploy executed on main
    - main

publish:
  extends: .base_gh_ssh_agent
  stage: publish
  script:
    - npm ci --cache .npm --prefer-offline
    - git config --global user.email "dev+cogment@ai-r.com"
    - git config --global user.name "AI Redefined Inc."
    - USE_SSH=true npm run deploy
  only:
    - main

publish_branch_to_github:
  extends: .base_gh_ssh_agent
  stage: publish
  script:
    - git checkout ${CI_COMMIT_BRANCH} # Checkout the branch not the sha1
    - git remote add downstream git@github.com:cogment/cogment-doc.git
    - git fetch downstream ${CI_COMMIT_BRANCH}
    - git push --tags downstream ${CI_COMMIT_BRANCH}:${CI_COMMIT_BRANCH}
  only:
    - main
