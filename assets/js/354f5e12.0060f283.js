"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[71],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),h=r,u=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6765:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>g,default:()=>_,frontMatter:()=>k,metadata:()=>N,toc:()=>y});var n=a(3117),r=a(7294),o=a(3905),i=a(6010),s=a(2389),l=a(7392),c=a(7094),p=a(2466);const d="tabList__CuJ",m="tabItem_LNqP";function h(e){var t,a;const{lazy:o,block:s,defaultValue:h,values:u,groupId:v,className:f}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=u?u:k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),N=(0,l.l)(g,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===h?h:null!=(t=null!=h?h:null==(a=k.find((e=>e.props.default)))?void 0:a.props.value)?t:k[0].props.value;if(null!==b&&!g.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:w}=(0,c.U)(),[_,T]=(0,r.useState)(b),C=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=v){const e=y[v];null!=e&&e!==_&&g.some((t=>t.value===e))&&T(e)}const I=e=>{const t=e.currentTarget,a=C.indexOf(t),n=g[a].value;n!==_&&(x(t),T(n),null!=v&&w(v,String(n)))},O=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=C.indexOf(e.currentTarget)+1;a=null!=(n=C[t])?n:C[0];break}case"ArrowLeft":{var r;const t=C.indexOf(e.currentTarget)-1;a=null!=(r=C[t])?r:C[C.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},f)},g.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>C.push(e),onKeyDown:O,onFocus:I,onClick:I},o,{className:(0,i.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":_===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(k.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function u(e){const t=(0,s.Z)();return r.createElement(h,(0,n.Z)({key:String(t)},e))}const v="tabItem_Ymn6";function f(e){let{children:t,hidden:a,className:n}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(v,n),hidden:a},t)}const k={sidebar_position:2},g="Development guide",N={unversionedId:"guide/development-guide",id:"guide/development-guide",title:"Development guide",description:"This document gives a high level view of what it is to develop a Cogment based application using Cogment SDKs. It assumes the reader is familiar with the Cogment core concepts.",source:"@site/docs/guide/development-guide.mdx",sourceDirName:"guide",slug:"/guide/development-guide",permalink:"/docs/guide/development-guide",draft:!1,tags:[],version:"current",lastUpdatedAt:1664378330,formattedLastUpdatedAt:"9/28/2022",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Core Concepts",permalink:"/docs/guide/core-concepts"},next:{title:"Tutorial",permalink:"/docs/guide/tutorial/"}},b={},y=[{value:"The spec file",id:"the-spec-file",level:2},{value:"Compiling the spec file",id:"compiling-the-spec-file",level:3},{value:"Environment",id:"environment",level:2},{value:"Sending observations",id:"sending-observations",level:3},{value:"Actor",id:"actor",level:2},{value:"Service actor / Client actor",id:"service-actor--client-actor",level:3},{value:"Actor Availability",id:"actor-availability",level:3},{value:"Controller",id:"controller",level:2},{value:"Start and terminate trials",id:"start-and-terminate-trials",level:3},{value:"Start trial from trial parameters",id:"start-trial-from-trial-parameters",level:4},{value:"Watch trials",id:"watch-trials",level:3},{value:"Rewards",id:"rewards",level:2},{value:"Creating",id:"creating",level:3},{value:"Consuming",id:"consuming",level:3},{value:"Messages",id:"messages",level:2},{value:"Creating",id:"creating-1",level:3},{value:"Consuming",id:"consuming-1",level:3},{value:"Pre-trial hook",id:"pre-trial-hook",level:2},{value:"Trial lifetime",id:"trial-lifetime",level:2},{value:"Trial start",id:"trial-start",level:3},{value:"Trial run",id:"trial-run",level:3},{value:"Trial end",id:"trial-end",level:3},{value:"Trial ended by the environment",id:"trial-ended-by-the-environment",level:4},{value:"Soft termination",id:"soft-termination",level:4},{value:"Hard termination",id:"hard-termination",level:4}],w={toc:y};function _(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},w,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"development-guide"},"Development guide"),(0,o.kt)("p",null,"This document gives a high level view of what it is to develop a Cogment based application using Cogment SDKs. It assumes the reader is familiar with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts"},"Cogment core concepts"),"."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Some features aren't available in Javascript, if there's only Python examples under a certain section, that feature is python only."))),(0,o.kt)("p",null,"The High-level Cogment API expects users to use ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"protocol buffers")," to declare a project's data structures. The intricacies of protobufs are beyond the scope of this document. Basic knowledge of the technology and its usage is assumed."),(0,o.kt)("h2",{id:"the-spec-file"},"The spec file"),(0,o.kt)("p",null,"The spec file, usully named ",(0,o.kt)("inlineCode",{parentName:"p"},"cogment.yaml"),", defines the specifics of a type of trials for a Cogment app: actor classes as well as environment & trial configuration types. It is the starting point for a project."),(0,o.kt)("p",null,"An actor class is primarily defined by its observation space and action space."),(0,o.kt)("p",null,"The data structures describing these spaces are declared by using a protocol buffer message type. ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#observations--actions"},"Observations and actions")," will simply be instances of the matching type."),(0,o.kt)("p",null,"For example, in the following, ",(0,o.kt)("inlineCode",{parentName:"p"},"driver")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"pedestrian")," share a common view of the environment, hence use the same observation space, but have different actions available to them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"import:\n  proto:\n    - city.proto\n\nactors:\n  driver:\n    observation:\n      space: city.Observation\n\n    action:\n      space: city.DriverAction\n\n  pedestrian:\n    observation:\n      space: city.Observation\n\n    action:\n      space: city.PedestrianAction\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This shows only the relevant part of the full spec file, you can find the full list of configurable options ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/cogment-yaml"},"in the reference page"),"."))),(0,o.kt)("h3",{id:"compiling-the-spec-file"},"Compiling the spec file"),(0,o.kt)("p",null,"In order to use the spec file within the various supported languages, it needs to be compiled. This is done by the code generation modules of the specific language's SDK you are using."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,"For the python SDK, the generation step requires an ",(0,o.kt)("a",{parentName:"p",href:"https://peps.python.org/pep-0508/#extras"},"extra")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"cogment")," package. Using pip you can install the SDK with its extra using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"pip install cogment[generate]\n")),(0,o.kt)("p",null,"The generation can then be executed using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python -m cogment.generate cogment.yaml\n")),(0,o.kt)("p",null,"This will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"cog_settings.py")," file as well as multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"*_pb.py")," files.")),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("p",null,"For the Javascript SDK, the generation requires the SDK to be installed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"npm install @cogment/cogment-js-sdk\n")),(0,o.kt)("p",null,"The generation can then be executed using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"npx cogment-js-sdk-generate cogment.yaml\n")),(0,o.kt)("p",null,"This will create several files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," folder: ",(0,o.kt)("inlineCode",{parentName:"p"},"CogSettings.js"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"CogSettings.d.ts"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"CogSettings.d.ts.map")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"CogTypes.d.ts")," as well multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"*_pb.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"*_pb.d.ts")," files."))),(0,o.kt)("h2",{id:"environment"},"Environment"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#environment"},"Environments")," are implemented by functions that take a ",(0,o.kt)("em",{parentName:"p"},"environment session")," instance."),(0,o.kt)("p",null,"This function will be called once for each ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#trial"},"trial"),". This function usually consists of three sections."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The environment's ",(0,o.kt)("strong",{parentName:"li"},"initialization"),", where its internal state can be initialized and processes started. It ends with the sending of the initial observations to the actors participating in the trial."),(0,o.kt)("li",{parentName:"ul"},"Its ",(0,o.kt)("strong",{parentName:"li"},"event loop"),", where the environment iterates through the events occurring during the trial and produces ",(0,o.kt)("a",{parentName:"li",href:"/docs/guide/core-concepts#observations--actions"},"observations")," as well as receives messages. In this loop the environment can end the trial on its own or the end can be requested, see the ",(0,o.kt)("a",{parentName:"li",href:"#trial-lifetime"},"Trial lifetime")," section for further information."),(0,o.kt)("li",{parentName:"ul"},"Its ",(0,o.kt)("strong",{parentName:"li"},"termination"),", where cleanup occurs.")),(0,o.kt)("p",null,"In the common case where all actors within a trial share the same observation, a bare-minimum environment service would look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'async def environment(environment_session):\n  # -- Initialization --\n\n  # Retrieve the actors participating in the trial\n  actors = environment_session.get_active_actors()\n\n  # Start the trial and send a starting observation to all actors\n  environment_session.start([("*", Observation())])\n\n  # -- Event loop --\n  async for event in environment_session.all_events():\n    if event.actions:\n      # `event.actions` is a list of the actions done by the actors\n      actions = event.actions\n      if event.type == cogment.EventType.ACTIVE:\n        # The trial is active, produce an observation in response to the actions\n        environment_session.produce_observations([("*", Observation())])\n        # Alternatively the environment can decide to **end** the trial with the following\n        # environment_session.end([("*", Observation())])\n      else:\n        # The trial termination has been requested\n        # Produce a final observation\n        environment_session.end([("*", Observation())])\n\n    for message in event.messages:\n      # `event.messages` is a list of all the messages received by the environment (it can be empty)\n\n      # Handle each message here.\n\n  # -- Termination --\n  print(f"Trial [{environment_session.get_trial_id()}] terminated")\n')),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#class-environmentsessionsession"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment.EnvironmentSession"))," class reference."),(0,o.kt)("p",null,"This environment implementation needs to be registered and served so that the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#orchestrator"},"Orchestrator")," can reach it. This can be done through a ",(0,o.kt)("inlineCode",{parentName:"p"},"Context")," instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'context = cogment.Context(user_id="my_user_id", cog_settings=cog_settings)\n\ncontext.register_environment(impl=environment, impl_name="my_environment")\n\nawait context.serve_all_registered(cogment.ServedEndpoint(port=9000))\n')),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#class-cogmentcontext"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment.Context"))," class reference."),(0,o.kt)("h3",{id:"sending-observations"},"Sending observations"),(0,o.kt)("p",null,"The environment session has 3 different methods able to send observations: ",(0,o.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"produce_observations")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"end"),". Each of those methods takes a list of 2-tuples destination / observation."),(0,o.kt)("p",null,"As demonstrated above, sending the same observation to all actors is done using ",(0,o.kt)("inlineCode",{parentName:"p"},'"*"')," as the destination."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'environment_session.produce_observations([("*", Observation(...))])\n')),(0,o.kt)("p",null,"It is also possible to send different observations to different actors. This can be useful to send observations of the ",(0,o.kt)("em",{parentName:"p"},"world")," from the point of view of the actor or to send partial observations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'environment_session.produce_observations([\n  ("my_first_actor_name", Observation(...)),\n  ("my_second_actor_name", Observation(...))\n])\n')),(0,o.kt)("p",null,"Please note that the environment should always send observations such as each actor in the trial receives one."),(0,o.kt)("h2",{id:"actor"},"Actor"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#actor"},"Actors")," implementations look a lot like the ",(0,o.kt)("a",{parentName:"p",href:"#environment"},"environment's"),". They take ",(0,o.kt)("em",{parentName:"p"},"actor session")," instance and have the same three sections: ",(0,o.kt)("strong",{parentName:"p"},"initialization"),", ",(0,o.kt)("strong",{parentName:"p"},"event loop")," and ",(0,o.kt)("strong",{parentName:"p"},"termination"),"."),(0,o.kt)("p",null,"The event loops in Actors' implementations handle three basic types of events:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"observation")," produced by the environment and should lead to an action being done."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rewards")," sent by other actors or the environment, we'll talk about them in more details ",(0,o.kt)("a",{parentName:"li",href:"#reward"},"below"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"messages")," sent by other actors or the environment, we'll talk about them in more details ",(0,o.kt)("a",{parentName:"li",href:"#messages"},"below"),".")),(0,o.kt)("p",null,"A typical actor implementation would look like this:"),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'async def driver_actor(actor_session):\n  # -- Initialization --\n\n  # Notify that the actor is ready for the trial to start.\n  actor_session.start()\n\n  async for event in actor_session.all_events():\n    if event.observation:\n      # `event.observation` is an instance of the Observation produced by the environment\n      observation = event.observation\n      if event.type == cogment.EventType.ACTIVE:\n        # The trial is active, it is expecting the agent to do an action\n        actor_session.do_action(DriverAction(...))\n\n    for reward in event.rewards:\n      # `event.rewards` is a list of all the rewards received by the actor (it can be empty)\n\n      # Handle each reward here.\n\n    for message in event.messages:\n      # `event.messages` is a list of all the messages received by the actor (it can be empty)\n\n      # Handle each message here.\n\n  # -- Termination --\n  print(f"Trial [{actor_session.get_trial_id()}] terminated")\n')),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#class-actorsessionsession"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment.ActorSession"))," class reference.")),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const driverActor = async (actorSession) => {\n  // -- Initialization --\n\n  // Notify that the actor is ready for the trial to start.\n  actorSession.start();\n\n  for await (const event of actorSession.eventLoop()) {\n    if (event.observation) {\n      // `event.observation` is an instance of the Observation produced by the environment\n      observation = event.observation;\n      if (event.type === cogment.EventType.ACTIVE) {\n        // The trial is active, it is expecting the agent to do an action\n        actorSession.sendAction(new DriverAction());\n      }\n    }\n    for (const reward of event.rewards) {\n      // `event.rewards` is a list of all the rewards received by the actor (it can be empty)\n      // Handle each reward here.\n    }\n    for (const message of event.messages) {\n      // `event.messages` is a list of all the messages received by the actor (it can be empty)\n      // Handle each message here.\n    }\n  }\n\n  // -- Termination --\n  console.log(`Trial [${actorSession.getTrialId()}] terminated`);\n};\n")),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/javascript#class-actorsession-extends-session"},(0,o.kt)("inlineCode",{parentName:"a"},"ActorSession"))," class reference."))),(0,o.kt)("h3",{id:"service-actor--client-actor"},"Service actor / Client actor"),(0,o.kt)("p",null,"A Cogment app can use two types of actors, they are identical in terms of implementation but differ in how they interact with the app's ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#orchestrator"},"Orchestrator"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Service actors")," are accessible in the same way the environment is, through a ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#class-cogmentcontext"},(0,o.kt)("inlineCode",{parentName:"a"},"Context"))," instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'context = cogment.Context(cog_settings=cog_settings, user_id="my_user_id")\ncontext.register_actor(impl=actor, impl_name="driver_actor", actor_classes=["driver"])\ncontext.register_actor(impl=actor_slow, impl_name="driver_actor_slow", actor_classes=["driver"])\n\nawait context.serve_all_registered(cogment.ServedEndpoint(port=9000))\n')),(0,o.kt)("p",null,"Note that it is also through this registrating that the implementation is associated with one or more actor classes it implements."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Client actors"),", contrary to Service actors, are not served to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#orchestrator"},"Orchestrator"),". They connect as clients of the Orchestrator and join a ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#trial"},"trial")," that has started."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'context = cogment.Context(cog_settings=cog_settings, user_id="my_user_id")\ncontext.register_actor(\n  impl=actor,\n  impl_name="human_pedestrian",\n  actor_classes=["pedestrian"]\n)\n\nawait context.join_trial(\n  trial_id=trial_id,\n  cogment.Endpoint(url="grpc://orchestrator:9000"),\n  actor_name="Alice"\n)\n'))),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const context = new Context(cogSettings, "my_user_id");\n\ncontext.registerActor(actorImpl, "human_pedestrian", "pedestrian");\n\nawait context.joinTrial(trialId, "grpc://orchestrator:9000", "Alice");\n')))),(0,o.kt)("p",null,"Note that a trial including one or more client actors will wait for all of them to join before any actor can start processing events."),(0,o.kt)("p",null,"Due to the different network requirements, client actors are a good fit when implementing a frontend for human actors."),(0,o.kt)("h3",{id:"actor-availability"},"Actor Availability"),(0,o.kt)("p",null,"There are four actor parameters (see ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/parameters#parameters-reference"},"Trial Parameters"),") to manage actor responses for a trial: ",(0,o.kt)("inlineCode",{parentName:"p"},"initial_connection_timeout"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"response_timeout"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"optional")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"default_action"),".\nThe timeouts control when an actor becomes unavailable, and the other two control what happens when it becomes unavailable."),(0,o.kt)("p",null,"The trial will be ",(0,o.kt)("a",{parentName:"p",href:"#hard-termination"},(0,o.kt)("em",{parentName:"a"},"hard")," terminated")," by the Orchestrator if a required (non-optional) actor becomes unavailable, whereas it can continue if an optional actor becomes unavailable."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"default_action")," is for optional actors; when the actor is unavailable, the default action will be sent to the environment. If there is no default action defined, the environment is informed that the actor is unavailable, but no action is provided."),(0,o.kt)("p",null,"E.g. If a required actor (with ",(0,o.kt)("inlineCode",{parentName:"p"},"optional")," set to False) has a ",(0,o.kt)("inlineCode",{parentName:"p"},"response_timeout")," set to 5.0 seconds, but takes more than 5 seconds to respond to a new observation (e.g. due to excessive computation, or a crash), then the trial will be terminated."),(0,o.kt)("h2",{id:"controller"},"Controller"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#trial"},"Trials")," are started by clients of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#orchestrator"},"Orchestrator")," using a Controller. Instances of a controller are built from the context instance and connect to an Orchestrator endpoint."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'controller = context.get_controller(\n  endpoint=cogment.Endpoint(url="grpc://orchestrator:9000")\n)\n')),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#class-controller"},(0,o.kt)("inlineCode",{parentName:"a"},"Controller"))," class reference.")),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const controller = context.getController("grpc://orchestrator:9000");\n')),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/javascript#class-controller"},(0,o.kt)("inlineCode",{parentName:"a"},"Controller"))," class reference."))),(0,o.kt)("h3",{id:"start-and-terminate-trials"},"Start and terminate trials"),(0,o.kt)("p",null,"The controller can then be used to create trials and request their termination."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"trial_id = await controller.start_trial(trial_config=TrialConfig())\n\n# ...\n\nawait controller.terminate_trial([trial_id])\n"))),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const trialId = await controller.startTrial(new TrialConfig());\n\n// ...\n\nawait controller.terminateTrial([trialId]);\n")))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The default behavior of the Controller's ",(0,o.kt)("em",{parentName:"p"},"terminate trial")," function is to trigger a ",(0,o.kt)("a",{parentName:"p",href:"#soft-termination"},"soft termination"),", an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"hard")," parameters can be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," to trigger a ",(0,o.kt)("a",{parentName:"p",href:"#hard-termination"},"hard termination"),"."))),(0,o.kt)("h4",{id:"start-trial-from-trial-parameters"},"Start trial from trial parameters"),(0,o.kt)("p",null,"The above example uses an instance of the user-defined trial configuration to start the trial. This instance is then provided to a ",(0,o.kt)("a",{parentName:"p",href:"#pre-trial-hook"},"pre-trial hook")," to fully define the trial parameters. It is also possible to fully provide the trial parameters when starting the trial."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'actor_1_params = cogment.ActorParameters(\n    cog_settings,\n    name="Alice",\n    class_name="pedestrian",\n    endpoint="cogment://client"\n)\nactor_2_params = cogment.ActorParameters(\n    cog_settings,\n    name="ai_driver",\n    class_name="driver",\n    endpoint="grpc://driver_actors:9000",\n    implementation="driver_actor_slow"\n)\n\nenvironment_config=EnvironmentConfig(\n  # ...\n)\n\ntrial_params=cogment.TrialParameters(\n    cog_settings,\n    environment_name="environment",\n    environment_implementation="my_environment"\n    environment_endpoint="grpc://environment:9000",\n    environment_config=environment_config,\n    actors=[\n        actor_1_params,\n        actor_2_params,\n    ]\n)\n')),(0,o.kt)("p",null,"For further details, take a look at the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#class-cogmenttrialparameters"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment.TrialParameters"))," class reference."),(0,o.kt)("h3",{id:"watch-trials"},"Watch trials"),(0,o.kt)("p",null,"The controller can also be used to subscribe to events occuring in the trials run by the Orchestrator it connects to. For example, this can be used to wait for a trial's end:"),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'async for trial_info in controller.watch_trials(trial_state_filters=[\n  cogment.TrialState.ENDED\n]):\n  print(f"The trial having id [{trial_info.trial_id}] ended")\n'))),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for await (const trialListEntry of controller.watchTrials([\n  cogment.TrialState.ENDED,\n])) {\n  console.log(`The trial having id ${trialListEntry.getTrialId()} ended.`);\n}\n")))),(0,o.kt)("h2",{id:"rewards"},"Rewards"),(0,o.kt)("h3",{id:"creating"},"Creating"),(0,o.kt)("p",null,"Rewards are sent to ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#actor"},"Actors")," from another actor or the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#environment"},"Environment"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"session")," instance passed to their implementation can be used for this purpose."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"session.add_reward(value=-1, confidence=1, tick_id=-1, to=['an_actor_name'])\n")),(0,o.kt)("p",null,"Rewards consist of an arbitrary numerical ",(0,o.kt)("strong",{parentName:"p"},"value"),' describing how the reward "sender" ',(0,o.kt)("em",{parentName:"p"},"believes")," the actor performed.\nIt is ",(0,o.kt)("em",{parentName:"p"},"weighted")," by a value between 0 and 1 qualifying the ",(0,o.kt)("strong",{parentName:"p"},"confidence"),' of the "sender" in its reward, from a very low confidence just above 0 to a very high confidence approaching 1.\nThe confidence value is used to collate all the rewards sent to an actor at the same time.\nOptionally, a reward can be provided with arbitrary user data.'),(0,o.kt)("p",null,"Each reward applies to a list of recipients (either all the actors, all the actors of a given class or a specific actor) at a specific point in time, during the trial, defined as a ",(0,o.kt)("strong",{parentName:"p"},"tick"),'.\nThe tick ID can represent a past action if the value is smaller than the current tick ID ("future" actions are not allowed).\nPast actions, like sending a reward related to a past tick ID, are handled in accordance with the ',(0,o.kt)("a",{parentName:"p",href:"/docs/reference/parameters#nb_buffered_ticks"},"nb_buffered_ticks")," trial parameter."),(0,o.kt)("p",null,"The full documentation for ",(0,o.kt)("inlineCode",{parentName:"p"},"session.add_reward")," can be found ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#add_rewardself-value-confidence-to-tick_id-1-user_datanone"},"here"),"."),(0,o.kt)("h3",{id:"consuming"},"Consuming"),(0,o.kt)("p",null,"All the Rewards that are sent and destined to each specific ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#actor"},"actor")," for a given point in time are collated together by the framework."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#actor"},"actor")," can take into account the reward directly as the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#trial"},"trial")," is running by consuming the ",(0,o.kt)("inlineCode",{parentName:"p"},'"reward"')," event in their event loop."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"async for event in actor_session.all_events():\n  # [...]\n  for reward in event.rewards:\n    # `reward.tick_id` is the id of the tick this reward concerns.\n    tick_id = reward.tick_id\n    # `reward.value` is the aggregated value of the reward.\n    value = reward.value\n    for source_reward in reward.all_sources():\n      # Iterate over individual source rewards.\n      reward_value = source_reward.value\n      reward_confidence = source_reward.confidence\n      reward_sender = source_reward.sender\n      reward_user_data = source_reward.user_data\n"))),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for await (const event of actorSession.eventLoop()) {\n  // [...]\n  for (const reward of event.rewards) {\n    // `reward.tickId` is the id of the tick this reward concerns.\n    const tickId = reward.tickId;\n    // `reward.value` is the aggregated value of the reward.\n    const value = reward.value;\n    for (sourceReward of reward.sourcesList) {\n      // Iterate over individual source rewards.\n      const rewardValue = sourceReward.value;\n      const rewardConfidence = sourceReward.confidence;\n      const rewardSender = sourceReward.senderName;\n      const rewardUserData = sourceReward.userData;\n    }\n  }\n}\n")))),(0,o.kt)("h2",{id:"messages"},"Messages"),(0,o.kt)("h3",{id:"creating-1"},"Creating"),(0,o.kt)("p",null,"Messages can be created and sent between ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#actor"},"actors")," or the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#environment"},"environment")," within a trial using their ",(0,o.kt)("inlineCode",{parentName:"p"},"session")," instance."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"session.send_message(\n    user_data=MyProtobufDataStructure(...), # any protobuf data structure can be used here.\n    to=['pedestrian:*'], # send the message to all the actors of the \"pedestrian\" class\n)\n")),(0,o.kt)("p",null,"The full documentation for ",(0,o.kt)("inlineCode",{parentName:"p"},"session.send_message")," can be found ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#send_messageself-payload-to-to_environmentfalse"},"here"),".")),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const message = new Message();\nmessage.setRequest("hello");\n\n// Now we serialize into an Any protobuf message.\nconst anyPb = new MyProtobufDataStructure();\nanyPb.pack(message.serializeBinary(), "cogment_app.Message");\n\nactorSession.sendMessage({\n  from: actorName,\n  payload: anyPb,\n  to: "otherActorName",\n  trialId,\n});\n')),(0,o.kt)("p",null,"The full documentation for ",(0,o.kt)("inlineCode",{parentName:"p"},"actorSession.sendMessage")," can be found ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/javascript#sendmessagepayload-to"},"here"),"."))),(0,o.kt)("p",null,"Messages consist of an arbitrary payload, their ",(0,o.kt)("inlineCode",{parentName:"p"},"user_data/payload"),", defined as an instance of any protobuf data structure."),(0,o.kt)("p",null,"A message can be sent to one, many or all actors in a trial and / or to the environment."),(0,o.kt)("h3",{id:"consuming-1"},"Consuming"),(0,o.kt)("p",null,"All the messages that are sent and intended for each specific actor or environment will be received by the target actor or environment."),(0,o.kt)("p",null,"Actors or the environment can use the message directly, live, as the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guide/core-concepts#trial"},"trial")," is running, by consuming message event in their event loop."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(f,{value:"python",label:"Python",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"async for event in actor_session.all_events():\n  # [...]\n  for message in event.messages:\n    # `message.sender_name` is the name of the actor who sent a message\n    sender_name = message.sender_name\n    # `message.payload` is the content of the message, it needs to be unpacked\n    payload = message.payload\n"))),(0,o.kt)(f,{value:"javascript",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'for await (const event of actorSession.eventLoop()) {\n  // [...]\n  for (const message of event.messages) {\n    // `message.sender_name` is the name of the actor who sent a message\n    const sender = message.sender;\n    // `message.data` is the content of the message, it needs to be unpacked\n    const data = message.data;\n\n    const newMessage = data.unpack(\n      (x: Uint8Array) => Message.deserializeBinary(x),\n      "cogment_app.Message"\n    );\n  }\n}\n')))),(0,o.kt)("h2",{id:"pre-trial-hook"},"Pre-trial hook"),(0,o.kt)("p",null,"When starting a trial from a controller, an instance of the message type defined in ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/cogment-yaml#trial"},(0,o.kt)("inlineCode",{parentName:"a"},"trial:config_type"))," can be provided. This instance is then passed to the registered ",(0,o.kt)("strong",{parentName:"p"},"Pre trial hooks")," when the Orcehstrator was started. The role of these hooks is to fully parametrize the trial based on the provided config. To achieve that, they can modify the default trial params defined in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/parameters"},"parameters")," to specify the environment (i.e. its endpoint, implementation name & configuration), the number and parameters of the participant actors (i.e. their name, class, endpoint, implementation name & configuration) as well as additional parameters for the trial. The pre-trial hook can therefore be used to dynamically configure trials, to act as a service endpoint registry, or a load balancer."),(0,o.kt)("p",null,"Pre-trial hook implementations are registered in the same way the environment or actor implementation are and follow the same ",(0,o.kt)("em",{parentName:"p"},"session")," pattern."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'async def my_pre_trial_hook(pre_hook_session):\n  # The trial config provided by the controller can be retrieved like that\n  trial_config = pre_hook_session.trial_config\n  # The trial params can be edited directly\n  pre_hook_session.environment_config = # [...]\n  pre_hook_session.environment_endpoint = "grpc://my_environment:9000"\n  pre_hook_session.actors = [\n    {\n      "name": "my_first_actor_name",\n      "actor_class": "driver",\n      "endpoint": "grpc://driver:9000",\n      "implementation": "driver_actor",\n      "config": # [...],\n    },\n    {\n      "name": "my_second_actor_name",\n      "actor_class": "predestrian",\n      "endpoint": "cogment://client",\n      "config": # [...],\n    },\n  ]\n  # And finally should be validated\n  pre_hook_session.validate()\n\ncontext.register_pre_trial_hook(impl=my_pre_trial_hook)\n')),(0,o.kt)("h2",{id:"trial-lifetime"},"Trial lifetime"),(0,o.kt)("p",null,"Over their lifetime trials can be in different states managed by the Orchestrator. The current state of the trial can be accessed by a ",(0,o.kt)("a",{parentName:"p",href:"#controler"},"Controler"),"."),(0,o.kt)("p",null,"Possible Trial States are defined as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/reference/python#class-cogmenttrialstateenumenum"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment.TrialState"))," in the Python SDK."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/reference/javascript#enum-cogmenttrialstate"},(0,o.kt)("inlineCode",{parentName:"a"},"cogment.TrialState"))," in the Javascript SDK."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/reference/grpc#trialstate"},(0,o.kt)("inlineCode",{parentName:"a"},"cogmentAPI.TrialState"))," in the gRPC API.")),(0,o.kt)("h3",{id:"trial-start"},"Trial start"),(0,o.kt)("p",null,"The trial starts with a request from a ",(0,o.kt)("a",{parentName:"p",href:"#controller"},(0,o.kt)("strong",{parentName:"a"},"Controller"))," to the Orchestrator. At creation the trial is in the ",(0,o.kt)("inlineCode",{parentName:"p"},"INITIALIZING")," state."),(0,o.kt)("p",null,"If no trial params are provided at this stage, registered ",(0,o.kt)("a",{parentName:"p",href:"#pre-trial-hook"},(0,o.kt)("strong",{parentName:"a"},"Pre-trial hooks"))," are called in sequence. The trial is now fully initialized and becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"PENDING")," as it wait for all the components, actors and environment to be available."),(0,o.kt)("p",null,"Once all the non-optional actors are available and the environment sends the initial observation set, the trial becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"RUNNING"),". If at least one non-optional actor is unavailable, it terminates right away and becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"ENDED"),"."),(0,o.kt)("h3",{id:"trial-run"},"Trial run"),(0,o.kt)("p",null,"As long as the trial is ",(0,o.kt)("inlineCode",{parentName:"p"},"RUNNING"),", the Orchestrator executes ",(0,o.kt)("strong",{parentName:"p"},"steps"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To each ",(0,o.kt)("a",{parentName:"li",href:"#actor"},"actor"),", the Orchestrator sends an event, having the ",(0,o.kt)("inlineCode",{parentName:"li"},"ACTIVE")," type, containing its observation,"),(0,o.kt)("li",{parentName:"ul"},"The Orchestrator then waits to receive one action per actor,"),(0,o.kt)("li",{parentName:"ul"},"To the ",(0,o.kt)("a",{parentName:"li",href:"#environment"},"environment"),", the Orchestrator sends an event, having the ",(0,o.kt)("inlineCode",{parentName:"li"},"ACTIVE")," type, containing the set of actions,"),(0,o.kt)("li",{parentName:"ul"},"The Orchestrator then waits to receive the set of observations from the environment.")),(0,o.kt)("h3",{id:"trial-end"},"Trial end"),(0,o.kt)("h4",{id:"trial-ended-by-the-environment"},"Trial ended by the environment"),(0,o.kt)("p",null,"This is the normal way for a trial to end."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("a",{parentName:"li",href:"#environment"},"environment")," sends the final observation set, using the ",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/python#endself-final_observations"},"session's ",(0,o.kt)("inlineCode",{parentName:"a"},"end")," method"),"."),(0,o.kt)("li",{parentName:"ol"},"The trial state is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"TERMINATING"),"."),(0,o.kt)("li",{parentName:"ol"},"Observations are sent to the ",(0,o.kt)("a",{parentName:"li",href:"#actor"},"actors")," with the event type ",(0,o.kt)("inlineCode",{parentName:"li"},"ENDING"),". ",(0,o.kt)("a",{parentName:"li",href:"#rewards"},"Rewards")," and ",(0,o.kt)("a",{parentName:"li",href:"#messages"},"messages")," sent before that point will sent to their destination; later ones will not."),(0,o.kt)("li",{parentName:"ol"},"Once all the last events are received, the Orchestrator sends a event of type ",(0,o.kt)("inlineCode",{parentName:"li"},"FINAL")," to all the components."),(0,o.kt)("li",{parentName:"ol"},"The trial becomes ",(0,o.kt)("inlineCode",{parentName:"li"},"ENDED"),".")),(0,o.kt)("h4",{id:"soft-termination"},"Soft termination"),(0,o.kt)("p",null,"Soft termination can be triggered either ",(0,o.kt)("strong",{parentName:"p"},"by the user"),", using the ",(0,o.kt)("a",{parentName:"p",href:"#start-and-terminate-trials"},"Controller")," or ",(0,o.kt)("strong",{parentName:"p"},"after a maximum number of steps"),", if the trial Parameter ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/parameters#parameters-reference"},(0,o.kt)("inlineCode",{parentName:"a"},"max_steps"))," is set."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The Orchestrator waits until it receives the next action set from the ",(0,o.kt)("a",{parentName:"li",href:"#actor"},"actors"),"."),(0,o.kt)("li",{parentName:"ol"},"The trial state is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"TERMINATING"),"."),(0,o.kt)("li",{parentName:"ol"},"Actions are sent to the ",(0,o.kt)("a",{parentName:"li",href:"#environment"},"environment")," with the event type ",(0,o.kt)("inlineCode",{parentName:"li"},"ENDING"),"."),(0,o.kt)("li",{parentName:"ol"},"From this point on the flow is the same as when the trial is ",(0,o.kt)("a",{parentName:"li",href:"#trial-ended-by-the-environment"},"ended by the environment"),".")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"After a soft termination is initiated (i.e. after receiving an event of type ",(0,o.kt)("inlineCode",{parentName:"p"},"ENDING"),"), the next set of observations sent by the environment will always be the last one (i.e. using ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#endself-final_observations"},(0,o.kt)("inlineCode",{parentName:"a"},"end"))," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/python#produce_observationsself-observations"},(0,o.kt)("inlineCode",{parentName:"a"},"produce_observation"))," will have the same behavior)."))),(0,o.kt)("h4",{id:"hard-termination"},"Hard termination"),(0,o.kt)("p",null,"Hard termination can be triggered in multiple ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"By the user"),", using the ",(0,o.kt)("a",{parentName:"li",href:"#start-and-terminate-trials"},"Controller"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Because of unavailable actors"),". If a required (non-optional) actor becomes unavailable (for any reason), the trial will be terminated (see ",(0,o.kt)("a",{parentName:"li",href:"#actor-availability"},"Actor Availability"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Because of inactivity"),". If a component (actor, environment, pre-trial hook, etc) does not respond, the trial will be waiting and be inactive. If the trial is inactive for too long (see ",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/parameters#parameters-reference"},"Parameter ",(0,o.kt)("inlineCode",{parentName:"a"},"max_inactivity")),"), it will be terminated. With actor components this may happen when the timeout is too long (or indefinite) then the actor never becomes unavailable (see ",(0,o.kt)("a",{parentName:"li",href:"#actor-availability"},"Actor Availability"),") and the trial will keep waiting for it."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Because of a critical error"),".")),(0,o.kt)("p",null,"In all this cases:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The trial becomes ",(0,o.kt)("inlineCode",{parentName:"li"},"TERMINATING"),"."),(0,o.kt)("li",{parentName:"ol"},"The Orchestrator sends a event of type ",(0,o.kt)("inlineCode",{parentName:"li"},"FINAL")," to all the components."),(0,o.kt)("li",{parentName:"ol"},"The trial becomes ",(0,o.kt)("inlineCode",{parentName:"li"},"ENDED"),".")))}_.isMDXComponent=!0}}]);