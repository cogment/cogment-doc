"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[171],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),h=i,u=m["".concat(s,".").concat(h)]||m[h]||d[h]||r;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:2},l="Runner",o={unversionedId:"reference/python-enterprise/runner",id:"reference/python-enterprise/runner",title:"Runner",description:"This is part of the Cogment Enterprise, AI Redefined's commercial offering.",source:"@site/docs/reference/python-enterprise/runner.md",sourceDirName:"reference/python-enterprise",slug:"/reference/python-enterprise/runner",permalink:"/docs/reference/python-enterprise/runner",draft:!1,tags:[],version:"current",lastUpdatedAt:1682371745,formattedLastUpdatedAt:"Apr 24, 2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Installation",permalink:"/docs/reference/python-enterprise/installation"},next:{title:"gRPC API",permalink:"/docs/reference/grpc"}},s={},c=[{value:"General usage",id:"general-usage",level:2},{value:"<code>asyncio</code>",id:"asyncio",level:3},{value:"Logging",id:"logging",level:3},{value:"Trial Specifications",id:"trial-specifications",level:3},{value:"Top-level import",id:"top-level-import",level:3},{value:"Utilities and Constants",id:"utilities-and-constants",level:2},{value:"<code>cogment_enterprise.runner.BATCH_ID_PROPERTY</code>",id:"cogment_enterpriserunnerbatch_id_property",level:3},{value:"<code>cogment_enterprise.runner.BATCH_TRIAL_INDEX_PROPERTY</code>",id:"cogment_enterpriserunnerbatch_trial_index_property",level:3},{value:"<code>cogment_enterprise.runner.BATCH_LAST_TRIAL_PROPERTY</code>",id:"cogment_enterpriserunnerbatch_last_trial_property",level:3},{value:"<code>cogment_enterprise.runner.deserialize_action(serialized_data, actor_class, cog_settings)</code>",id:"cogment_enterpriserunnerdeserialize_actionserialized_data-actor_class-cog_settings",level:3},{value:"<code>cogment_enterprise.runner.deserialize_actor_observation(serialized_data, actor_class, cog_settings)</code>",id:"cogment_enterpriserunnerdeserialize_actor_observationserialized_data-actor_class-cog_settings",level:3},{value:"<code>cogment_enterprise.runner.deserialize_actor_config(serialized_data, actor_class, cog_settings)</code>",id:"cogment_enterpriserunnerdeserialize_actor_configserialized_data-actor_class-cog_settings",level:3},{value:"<code>cogment_enterprise.runner.deserialize_environment_config(serialized_data, cog_settings)</code>",id:"cogment_enterpriserunnerdeserialize_environment_configserialized_data-cog_settings",level:3},{value:"<code>cogment_enterprise.runner.deserialize_trial_config(serialized_data, cog_settings)</code>",id:"cogment_enterpriserunnerdeserialize_trial_configserialized_data-cog_settings",level:3},{value:"class cogment_enterprise.runner.TrialRunner",id:"class-cogment_enterpriserunnertrialrunner",level:2},{value:"<code>__init__(self, user_id, cog_settings=None, asyncio_loop=None, directory_endpoint=None, directory_auth_token=None, orchestrator_endpoint=None, datastore_endpoint=None, model_registry=None)</code>",id:"__init__self-user_id-cog_settingsnone-asyncio_loopnone-directory_endpointnone-directory_auth_tokennone-orchestrator_endpointnone-datastore_endpointnone-model_registrynone",level:3},{value:"<code>async get_controller(self)</code>",id:"async-get_controllerself",level:3},{value:"<code>async get_datastore(self)</code>",id:"async-get_datastoreself",level:3},{value:"<code>async get_model_registry(self)</code>",id:"async-get_model_registryself",level:3},{value:"<code>async run_simple_batch(self, nb_trials, nb_parallel_trials=1, id=None, pre_trial_callback=None, post_trial_callback=None)</code>",id:"async-run_simple_batchself-nb_trials-nb_parallel_trials1-idnone-pre_trial_callbacknone-post_trial_callbacknone",level:3},{value:"<code>async run_simple_training(self, batch, sampler_callback, actor_names=[])</code>",id:"async-run_simple_trainingself-batch-sampler_callback-actor_names",level:3},{value:"class TrialBatch",id:"class-trialbatch",level:2},{value:"<code>pause(self)</code>",id:"pauseself",level:3},{value:"<code>resume(self)</code>",id:"resumeself",level:3},{value:"<code>stop(self)</code>",id:"stopself",level:3},{value:"<code>terminate(self, hard=False)</code>",id:"terminateself-hardfalse",level:3},{value:"<code>is_running(self)</code>",id:"is_runningself",level:3},{value:"<code>nb_trials_run(self)</code>",id:"nb_trials_runself",level:3},{value:"<code>async wait(self, timeout)</code>",id:"async-waitself-timeout",level:3},{value:"class BatchTrainer",id:"class-batchtrainer",level:2},{value:"<code>async stop(self)</code>",id:"async-stopself",level:3},{value:"<code>is_running(self)</code>",id:"is_runningself-1",level:3},{value:"<code>async wait(self, timeout)</code>",id:"async-waitself-timeout-1",level:3},{value:"class BatchTrialInfo",id:"class-batchtrialinfo",level:2},{value:"Callbacks",id:"callbacks",level:2},{value:"Use",id:"use",level:3},{value:"Pre-Trial Callback",id:"pre-trial-callback",level:3},{value:"Post-Trial Callback",id:"post-trial-callback",level:3},{value:"Sampler Callback",id:"sampler-callback",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"runner"},"Runner"),(0,i.kt)("admonition",{title:"Cogment Enterprise",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This is part of the ",(0,i.kt)("strong",{parentName:"p"},"Cogment Enterprise"),", ",(0,i.kt)("a",{parentName:"p",href:"https://ai-r.com/"},"AI Redefined's")," commercial offering.")),(0,i.kt)("h2",{id:"general-usage"},"General usage"),(0,i.kt)("h3",{id:"asyncio"},(0,i.kt)("inlineCode",{parentName:"h3"},"asyncio")),(0,i.kt)("p",null,"The use of this module requires ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/python"},"Cogment Python SDK")," >= 2.8.0. It uses Python's ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio")," library and as such should be run in an ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio.Task"),".\nThis documentation assumes some familiarity with the ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio")," library of Python (see ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},"Python documentation"),")."),(0,i.kt)("p",null,"E.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import asyncio\n\nasyncio.run(MyMainFunction())\n")),(0,i.kt)("h3",{id:"logging"},"Logging"),(0,i.kt)("p",null,"This module uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"cogment.enterprise")," logger, and the default log level is ",(0,i.kt)("inlineCode",{parentName:"p"},"INFO"),". E.g. to change the log level to ",(0,i.kt)("inlineCode",{parentName:"p"},"WARNING"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import cogment_enterprise\nimport logging\n\nlogging.getLogger("cogment.enterprise").setLevel(logging.WARNING)\n')),(0,i.kt)("p",null,"Or set the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"COGMENT_ENTERPRISE_LOG_LEVEL")," to one of the values: ",(0,i.kt)("inlineCode",{parentName:"p"},"off"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"warning"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"trace"),".\nThe logging works the same as Cogment Python SDK logging (see Cogment Python SDK documentation)."),(0,i.kt)("h3",{id:"trial-specifications"},"Trial Specifications"),(0,i.kt)("p",null,"This module is designed to work without any trial specifications (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),"), but is easier to use if the specification are available."),(0,i.kt)("p",null,"If the specifications are not provided, some internal object deserializations will not happen (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"sample.observation"),"), and special serialized versions will have to be used (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"sample.observation_serialized"),").\nHelper functions are provided for deserializing the various defined objects in the specifications (see below)."),(0,i.kt)("p",null,"Objects normally received as ",(0,i.kt)("inlineCode",{parentName:"p"},"google.protobuf.Any")," will still be deserialized to such an object as it does not depend on the specification of the trial."),(0,i.kt)("h3",{id:"top-level-import"},"Top-level import"),(0,i.kt)("p",null,"The main module of the Runner SDK is ",(0,i.kt)("inlineCode",{parentName:"p"},"cogment_enterprise.runner"),", and most enterprise scripts will start with a ",(0,i.kt)("a",{parentName:"p",href:"#class-cogment_enterpriserunnertrialrunner"},"cogment_enterprise.runner.TrialRunner"),"."),(0,i.kt)("h2",{id:"utilities-and-constants"},"Utilities and Constants"),(0,i.kt)("h3",{id:"cogment_enterpriserunnerbatch_id_property"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.BATCH_ID_PROPERTY")),(0,i.kt)("p",null,"This is the name of the trial property where the batch ID is stored.\nEach trial started by a batch will have this property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"batch_id = trial_parameters.properties[cogment_enterprise.runner.BATCH_ID_PROPERTY]\n")),(0,i.kt)("h3",{id:"cogment_enterpriserunnerbatch_trial_index_property"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.BATCH_TRIAL_INDEX_PROPERTY")),(0,i.kt)("p",null,"This is the name of the trial property where the index of the trial in the batch is stored.\nEach trial started by a batch will have this property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"trial_index_in_batch = trial_parameters.properties[cogment_enterprise.runner.BATCH_TRIAL_INDEX_PROPERTY]\n")),(0,i.kt)("h3",{id:"cogment_enterpriserunnerbatch_last_trial_property"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.BATCH_LAST_TRIAL_PROPERTY")),(0,i.kt)("p",null,"This is the name of the trial property that will be set on the last trial of the batch.\nThe property value is empty, it's presence indicates that this is the last trial of the batch.\nOnly one trial in a batch may have this property."),(0,i.kt)("p",null,"Note that there may not be a trial with this property if the batch was stopped prematurely."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"last_trial = cogment_enterprise.runner.BATCH_LAST_TRIAL_PROPERTY in trial_parameters.properties\n")),(0,i.kt)("h3",{id:"cogment_enterpriserunnerdeserialize_actionserialized_data-actor_class-cog_settings"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.deserialize_action(serialized_data, actor_class, cog_settings)")),(0,i.kt)("p",null,"Function to deserialize raw data into a Python class instance."),(0,i.kt)("p",null,"The data can only be deserialized by knowing the protobuf message it represents.\nIt can be done manually if one knows the protobuf message represented.\nThis function simplifies deserialization of messages related to a Cogment project with the trial spec module ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),"."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"serialized_data"),": ",(0,i.kt)("em",{parentName:"li"},"bytes")," - Raw data received."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actor_class"),": ",(0,i.kt)("em",{parentName:"li"},"str")," - Name of the class of the actor to which this data relates. This information is necessary to find the proper message type in the spec."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cog_settings"),": ",(0,i.kt)("em",{parentName:"li"},"module")," - Specification module associated with the trial from which the data relates.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"protobuf class instance")," - Action from an actor of type ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_class"),". The class of the action is defined as action space for the specific actor class in the section ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_classes:action:space")," in the spec file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),")."),(0,i.kt)("h3",{id:"cogment_enterpriserunnerdeserialize_actor_observationserialized_data-actor_class-cog_settings"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.deserialize_actor_observation(serialized_data, actor_class, cog_settings)")),(0,i.kt)("p",null,"Function to deserialize raw data into a Python class instance."),(0,i.kt)("p",null,"The data can only be deserialized by knowing the protobuf message it represents.\nIt can be done manually if one knows the protobuf message represented.\nThis function simplifies deserialization of messages related to a Cogment project with the trial spec module ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),"."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"serialized_data"),": ",(0,i.kt)("em",{parentName:"li"},"bytes")," - Raw data received."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actor_class"),": ",(0,i.kt)("em",{parentName:"li"},"str")," - Name of the class of the actor to which this data relates. This information is necessary to find the proper message type in the spec."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cog_settings"),": ",(0,i.kt)("em",{parentName:"li"},"module")," - Specification module associated with the trial from which the data relates.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"protobuf class instance")," - Observation for an actor of type ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_class"),". The class of the observation is defined as observation space for the specific actor class in the section ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_classes:observation:space")," in the spec file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),")."),(0,i.kt)("h3",{id:"cogment_enterpriserunnerdeserialize_actor_configserialized_data-actor_class-cog_settings"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.deserialize_actor_config(serialized_data, actor_class, cog_settings)")),(0,i.kt)("p",null,"Function to deserialize raw data into a Python class instance."),(0,i.kt)("p",null,"The data can only be deserialized by knowing the protobuf message it represents.\nIt can be done manually if one knows the protobuf message represented.\nThis function simplifies deserialization of messages related to a Cogment project with the trial spec module ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),"."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"serialized_data"),": ",(0,i.kt)("em",{parentName:"li"},"bytes")," - Raw data received."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actor_class"),": ",(0,i.kt)("em",{parentName:"li"},"str")," - Name of the class of the actor to which this data relates. This information is necessary to find the proper message type in the spec."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cog_settings"),": ",(0,i.kt)("em",{parentName:"li"},"module")," - Specification module associated with the trial from which the data relates.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"protobuf class instance")," - Config for an actor of type ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_class"),". The class of the config is defined as config type for the specific actor class in the section ",(0,i.kt)("inlineCode",{parentName:"p"},"actor_classes:config_type")," in the spec file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),")."),(0,i.kt)("h3",{id:"cogment_enterpriserunnerdeserialize_environment_configserialized_data-cog_settings"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.deserialize_environment_config(serialized_data, cog_settings)")),(0,i.kt)("p",null,"Function to deserialize raw data into a Python class instance."),(0,i.kt)("p",null,"The data can only be deserialized by knowing the protobuf message it represents.\nIt can be done manually if one knows the protobuf message represented.\nThis function simplifies deserialization of messages related to a Cogment project with the trial spec module ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),"."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"serialized_data"),": ",(0,i.kt)("em",{parentName:"li"},"bytes")," - Raw data received."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cog_settings"),": ",(0,i.kt)("em",{parentName:"li"},"module")," - Specification module associated with the trial from which the data relates.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"protobuf class instance")," - Config for the environment. The class of the config is defined as config type in the section ",(0,i.kt)("inlineCode",{parentName:"p"},"environment:config_type")," in the spec file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),")."),(0,i.kt)("h3",{id:"cogment_enterpriserunnerdeserialize_trial_configserialized_data-cog_settings"},(0,i.kt)("inlineCode",{parentName:"h3"},"cogment_enterprise.runner.deserialize_trial_config(serialized_data, cog_settings)")),(0,i.kt)("p",null,"Function to deserialize raw data into a Python class instance."),(0,i.kt)("p",null,"The data can only be deserialized by knowing the protobuf message it represents.\nIt can be done manually if one knows the protobuf message represented.\nThis function simplifies deserialization of messages related to a Cogment project with the trial spec module ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),"."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"serialized_data"),": ",(0,i.kt)("em",{parentName:"li"},"bytes")," - Raw data received."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cog_settings"),": ",(0,i.kt)("em",{parentName:"li"},"module")," - Specification module associated with the trial from which the data relates.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"protobuf class instance")," - Config for the trial. The class of the config is defined as config type in the section ",(0,i.kt)("inlineCode",{parentName:"p"},"trial:config_type")," in the spec file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cog_settings"),")."),(0,i.kt)("h2",{id:"class-cogment_enterpriserunnertrialrunner"},"class cogment_enterprise.runner.TrialRunner"),(0,i.kt)("h3",{id:"__init__self-user_id-cog_settingsnone-asyncio_loopnone-directory_endpointnone-directory_auth_tokennone-orchestrator_endpointnone-datastore_endpointnone-model_registrynone"},(0,i.kt)("inlineCode",{parentName:"h3"},"__init__(self, user_id, cog_settings=None, asyncio_loop=None, directory_endpoint=None, directory_auth_token=None, orchestrator_endpoint=None, datastore_endpoint=None, model_registry=None)")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_id"),": ",(0,i.kt)("em",{parentName:"li"},"str")," - Identifier for the user of this context."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cog_settings"),": ",(0,i.kt)("em",{parentName:"li"},"module")," - Settings module associated with trials that will be run (",(0,i.kt)("a",{parentName:"li",href:"#cog_settings.py"},"cog_settings")," namespace)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"asyncio_loop"),": ",(0,i.kt)("em",{parentName:"li"},"asyncio.Loop")," - For special purpose implementations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directory_endpoint"),": ",(0,i.kt)("em",{parentName:"li"},"Endpoint instance"),' - Grpc endpoint (i.e. starting with "grpc://") to access the directory. The directory will be used to inquire discovery endpoints, and to register the services for discovery. If no endpoint is provided, a check for the environment variable ',(0,i.kt)("inlineCode",{parentName:"li"},"COGMENT_DIRECTORY_ENDPOINT")," will be made and if it exists, it will be used as the URL of a basic endpoint."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"directory_auth_token"),": ",(0,i.kt)("em",{parentName:"li"},"str")," - Authentication token for access to the directory. This token will be registered with the services, and must match registered tokens when inquiring the directory. If no token is provided, a check for the environment variable ",(0,i.kt)("inlineCode",{parentName:"li"},"COGMENT_DIRECTORY_AUTHENTICATION_TOKEN")," will be made and if it exists, it will be used as the token."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"orchestrator_endpoint"),": ",(0,i.kt)("em",{parentName:"li"},"Endpoint instance")," - Details of the connection to the Orchestrator. If not provided, the directory will be inquired. Only needed for running batches, not for training."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datastore_endpoint"),": ",(0,i.kt)("em",{parentName:"li"},"Endpoint instance")," - Details of the connection to the Datastore. If not provided, the directory will be inquired if necessary. This will be used as the datalog endpoint of the trials started by the batch. And it will be used as the source of samples for training."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"model_registry_endpoint"),": ",(0,i.kt)("em",{parentName:"li"},"Endpoint instance")," - Details of the connection to the Model Registry. If not provided, the directory will be inquired if necessary. Only needed for training, not running batches.")),(0,i.kt)("h3",{id:"async-get_controllerself"},(0,i.kt)("inlineCode",{parentName:"h3"},"async get_controller(self)")),(0,i.kt)("p",null,"Returns the Controller used by the TrialRunner."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"cogment.Controller instance")," - An instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"cogment.Controller")," class used to manage trials."),(0,i.kt)("h3",{id:"async-get_datastoreself"},(0,i.kt)("inlineCode",{parentName:"h3"},"async get_datastore(self)")),(0,i.kt)("p",null,"Returns the Datastore used by the TrialRunner."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"cogment.Datastore instance")," - Datastore."),(0,i.kt)("h3",{id:"async-get_model_registryself"},(0,i.kt)("inlineCode",{parentName:"h3"},"async get_model_registry(self)")),(0,i.kt)("p",null,"Returns the Model Registry used by the TrialRunner."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"cogment.ModelRegistry instance")," - Model Registry."),(0,i.kt)("h3",{id:"async-run_simple_batchself-nb_trials-nb_parallel_trials1-idnone-pre_trial_callbacknone-post_trial_callbacknone"},(0,i.kt)("inlineCode",{parentName:"h3"},"async run_simple_batch(self, nb_trials, nb_parallel_trials=1, id=None, pre_trial_callback=None, post_trial_callback=None)")),(0,i.kt)("p",null,"Method to start a batch of trials."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nb_trials"),": ",(0,i.kt)("em",{parentName:"li"},"int")," - The number of trials to run."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nb_parallel_trials"),": ",(0,i.kt)("em",{parentName:"li"},"int")," - The number of trials to run in parallel. Must be <= ",(0,i.kt)("inlineCode",{parentName:"li"},"nb_trials"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": ",(0,i.kt)("em",{parentName:"li"},"str")," - ID of the batch. This will be added to the properties of the trials that are started by the batch. This should be unique in the Datastore, otherwise there could be a clash of trial IDs (a mix of trials from different batches could also be used by the ",(0,i.kt)("inlineCode",{parentName:"li"},"BatchTrainer"),"). If ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", an ID will be chosen by the system (Unix epoch in nanoseconds)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pre_trial_callback"),": ",(0,i.kt)("em",{parentName:"li"},"async func(BatchTrialInfo instance) -> cogment.TrialParameters")," - This ",(0,i.kt)("a",{parentName:"li",href:"#callbacks"},"Callbacks")," function will be called before any new trial is started. If None, then the parameters for the trials will come from the Orchestrator defaults and pre-trial hooks (see Cogment Orchestrator documentation). In which case the ",(0,i.kt)("inlineCode",{parentName:"li"},"BatchTrainer")," cannot work with this batch (because the necessary trial properties cannot be set)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"post_trial_callback"),": ",(0,i.kt)("em",{parentName:"li"},"async func(sample, trial_parameters, model_registry)")," - This ",(0,i.kt)("a",{parentName:"li",href:"#callbacks"},"Callbacks")," function will be called after the end of a trial. If None, then no call will happen at the end of trials.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"TrialBatch instance")," - An instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TrialBatch")," class."),(0,i.kt)("h3",{id:"async-run_simple_trainingself-batch-sampler_callback-actor_names"},(0,i.kt)("inlineCode",{parentName:"h3"},"async run_simple_training(self, batch, sampler_callback, actor_names=[])")),(0,i.kt)("p",null,"Method to start training on a batch of trials."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"batch"),": ",(0,i.kt)("em",{parentName:"li"},"TrialBatch instance")," - The batch to train on. This will be used to identify the trials (from the trial properties) that are part of the batch and retrieve only the samples from these trials."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sampler_callback"),": ",(0,i.kt)("em",{parentName:"li"},"async func(cogment.DatastoreSample, cogment.TrialParameters, cogment.ModelRegistry) -> bool")," - This ",(0,i.kt)("a",{parentName:"li",href:"#callbacks"},"Callbacks")," function will be called for every batch sample retrieved.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"BatchTrainer instance")," - An instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchTrainer")," class."),(0,i.kt)("h2",{id:"class-trialbatch"},"class TrialBatch"),(0,i.kt)("p",null,"Class to run a batch of related trials."),(0,i.kt)("h3",{id:"pauseself"},(0,i.kt)("inlineCode",{parentName:"h3"},"pause(self)")),(0,i.kt)("p",null,"Method to pause the running of the batch. It stops any new trial from starting, but does not stop currently running trials. Even if all running trials end, the batch is not considered done until it is resumed, stopped or terminated."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: None"),(0,i.kt)("h3",{id:"resumeself"},(0,i.kt)("inlineCode",{parentName:"h3"},"resume(self)")),(0,i.kt)("p",null,"Method to restart a batch that was ",(0,i.kt)("a",{parentName:"p",href:"#pauseself"},"paused"),". It resumes the starting of new trials in the batch."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: None"),(0,i.kt)("h3",{id:"stopself"},(0,i.kt)("inlineCode",{parentName:"h3"},"stop(self)")),(0,i.kt)("p",null,'Method to stop the batch. It stops new trials from starting, and currently running trials continue to their normal end. Once all trials have ended, the batch is done. This implicitly "resumes" a paused batch.'),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: None"),(0,i.kt)("h3",{id:"terminateself-hardfalse"},(0,i.kt)("inlineCode",{parentName:"h3"},"terminate(self, hard=False)")),(0,i.kt)("p",null,'Method to terminate the batch. It stops new trials from starting, and currently running trials are terminated. The batch is then considered done. This implicitly "resumes" a paused batch.'),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hard"),": ",(0,i.kt)("em",{parentName:"li"},"bool"),' - If True the trials are sent a "hard" terminate, otherwise they are sent a "soft" terminate (see Python Documentation "Controller.terminate_trial").')),(0,i.kt)("p",null,"Return: None"),(0,i.kt)("h3",{id:"is_runningself"},(0,i.kt)("inlineCode",{parentName:"h3"},"is_running(self)")),(0,i.kt)("p",null,"Method to inquire whether the batch is done or not."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"bool")," - True if the batch is still running. I.e. there are still trials running or it is paused. False otherwise."),(0,i.kt)("h3",{id:"nb_trials_runself"},(0,i.kt)("inlineCode",{parentName:"h3"},"nb_trials_run(self)")),(0,i.kt)("p",null,"Method to inquire the number of trials run so far."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"int")," - Number of trials that were run (and ended) so far in the batch."),(0,i.kt)("h3",{id:"async-waitself-timeout"},(0,i.kt)("inlineCode",{parentName:"h3"},"async wait(self, timeout)")),(0,i.kt)("p",null,"Method to wait for the batch to be done. The batch will end normally when all trials have run and ended. The batch can also be stopped, terminated, or encounter an error to become done."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout"),": ",(0,i.kt)("em",{parentName:"li"},"float")," - Maximum time to wait in seconds.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"bool")," - True if the batch ended normally with the last trial tagged as such. False otherwise. ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if timed out."),(0,i.kt)("h2",{id:"class-batchtrainer"},"class BatchTrainer"),(0,i.kt)("p",null,"Class to help train a model on a specific batch of trials."),(0,i.kt)("h3",{id:"async-stopself"},(0,i.kt)("inlineCode",{parentName:"h3"},"async stop(self)")),(0,i.kt)("p",null,"Method to stop training. The callback will stop receiving samples and the training will be considered done. This is also automatically called when the instance is deleted."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: None"),(0,i.kt)("h3",{id:"is_runningself-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"is_running(self)")),(0,i.kt)("p",null,"Method to inquire whether the training is done or not."),(0,i.kt)("p",null,"Parameters: None"),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"bool")," - True if the training is still running. I.e. there are still samples being retrieved from the trials and sent to the callback. False otherwise."),(0,i.kt)("h3",{id:"async-waitself-timeout-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"async wait(self, timeout)")),(0,i.kt)("p",null,"Method to wait for the training to be done. The training will end normally when all samples of the batch have been processed. The training can also be stopped, or encounter an error to become done."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout"),": ",(0,i.kt)("em",{parentName:"li"},"float")," - Maximum time to wait in seconds.")),(0,i.kt)("p",null,"Return: ",(0,i.kt)("em",{parentName:"p"},"bool")," - True if all samples available were processed. False otherwise. ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if timed out."),(0,i.kt)("h2",{id:"class-batchtrialinfo"},"class BatchTrialInfo"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"batch_id"),": ",(0,i.kt)("em",{parentName:"p"},"str")," - ID of the batch"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"trial_index"),": ",(0,i.kt)("em",{parentName:"p"},"int")," - The index of the trial in the batch. Generally the order the trials were started, and unique in the batch (",(0,i.kt)("inlineCode",{parentName:"p"},"[0, nb_trials["),")."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"trial_info"),": ",(0,i.kt)("em",{parentName:"p"},"cogment.DatastoreTrialInfo")," - The running trial information. May not always be present."),(0,i.kt)("h2",{id:"callbacks"},"Callbacks"),(0,i.kt)("h3",{id:"use"},"Use"),(0,i.kt)("p",null,"These functions are passed to the ",(0,i.kt)("a",{parentName:"p",href:"#class-cogment_enterpriserunnertrialrunner"},(0,i.kt)("inlineCode",{parentName:"a"},"TrialRunner.run_simple_batch"))," or ",(0,i.kt)("a",{parentName:"p",href:"#async-run_simple_trainingself-batch-sampler_callback-actor_names"},(0,i.kt)("inlineCode",{parentName:"a"},"TrialRunner.run_simple_training"))," methods and will be called at specific times to request information to the user or provide information to the user.\nThey can be defined and used in a number of ways."),(0,i.kt)("p",null,"Here we take the ",(0,i.kt)("inlineCode",{parentName:"p"},"pre_trial_callback")," as an example, but the other callbacks are similar, except for parameters and return values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def my_pre_trial_callback(info: BatchTrialInfo):\n    trial_params = cogment.TrialParameters()\n    # ... Fill in the parameters here\n    return trial_params\n\nrunner = TrialRunner(1, 1, None, my_pre_trial_callback)\n")),(0,i.kt)("p",null,"Sometimes it is more convenient for the callback to be a method of a class in order to re-use data between calls, or share data with other parts of the program (or other callbacks), in this case it could look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class MyBatchData:\n    async def my_pre_trial_callback(self, info: BatchTrialInfo):\n        trial_params = cogment.TrialParameters()\n        # ... Fill in the parameters here\n        return trial_params\n\nmy_data = MyBatchData()\nrunner = TrialRunner(1, 1, None, my_data.my_pre_trial_callback)\n")),(0,i.kt)("p",null,"Although rare, it may be inconvenient sometimes to use a class for sharing data, in which case the Python ",(0,i.kt)("inlineCode",{parentName:"p"},"functools")," module can be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import functools\n\nasync def my_function(my_data, info: BatchTrialInfo):\n    trial_params = cogment.TrialParameters()\n    # ... Fill in the parameters here\n    return trial_params\n\nshared_data = #...\nactual_callback = functools.partial(my_function, shared_data)\nrunner = TrialRunner(1, 1, None, actual_callback)\n")),(0,i.kt)("h3",{id:"pre-trial-callback"},"Pre-Trial Callback"),(0,i.kt)("p",null,"This function is passed to the ",(0,i.kt)("a",{parentName:"p",href:"#class-cogment_enterpriserunnertrialrunner"},(0,i.kt)("inlineCode",{parentName:"a"},"TrialRunner.run_simple_batch"))," method and will be called before any trial is started to define the trial parameters.\nIt is an ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio")," coroutine."),(0,i.kt)("p",null,"e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def my_pre_trial_callback(info: BatchTrialInfo) -> cogment.TrialParameters:\n    trial_params = cogment.TrialParameters()\n    # ... Fill in the parameters here\n    return trial_params\n")),(0,i.kt)("p",null,"The parameter received is a ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchTrialInfo")," instance that is partially filled (i.e. it does not contain a ",(0,i.kt)("inlineCode",{parentName:"p"},"trial_info"),")."),(0,i.kt)("p",null,"The function must create an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"cogment.TrialParameters"),", fill the necessary parameters for the trial and return it.\nThe trial ID will automatically be created using the batch ID and the trial index."),(0,i.kt)("p",null,"Once the trial parameters are received by the ",(0,i.kt)("inlineCode",{parentName:"p"},"TrialBatch"),", some data will be added, and some will be overwritten. These are the attributes changed in the received ",(0,i.kt)("inlineCode",{parentName:"p"},"TrialParameter")," before passing it to Cogment:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"properties"),": Some properties will be added to the existing properties (see ",(0,i.kt)("a",{parentName:"li",href:"#module-attributes"},"Module Attributes"),"). If the property names clash, the user properties will be overwritten. In general, do not start property names with an underscore to prevent such clashes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datalog_endpoint"),": This attribute of the trial parameters will be overwritten with the provided ",(0,i.kt)("inlineCode",{parentName:"li"},"datastore_endpoint")," argument of ",(0,i.kt)("inlineCode",{parentName:"li"},"TrialRunner"),". If ",(0,i.kt)("inlineCode",{parentName:"li"},"datastore_endpoint")," was not provided, or it was ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),", then the directory will be used to find an appropriate datastore. The same datastore must be used by both the ",(0,i.kt)("inlineCode",{parentName:"li"},"TrialBatch")," (as a datalog) and ",(0,i.kt)("inlineCode",{parentName:"li"},"BatchTrainer")," (as a datastore), so the endpoint should resolve to the same datastore locally and at the Orchestrator (i.e. ideally use the same directory)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datalog_exclude_fields"),": This attribute will be reset (i.e. not excluding any fields from the datalog).")),(0,i.kt)("h3",{id:"post-trial-callback"},"Post-Trial Callback"),(0,i.kt)("p",null,"This function is passed to the ",(0,i.kt)("a",{parentName:"p",href:"#class-cogment_enterpriserunnertrialrunner"},(0,i.kt)("inlineCode",{parentName:"a"},"TrialRunner.run_simple_batch"))," method and will be called after a trial has ended.\nIt is an ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio")," coroutine."),(0,i.kt)("p",null,"e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def my_post_trial_callback(info: BatchTrialInfo):\n    # ... Do cleanup, tracking, etc\n")),(0,i.kt)("p",null,"The parameter received is a ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchTrialInfo")," instance."),(0,i.kt)("h3",{id:"sampler-callback"},"Sampler Callback"),(0,i.kt)("p",null,"This function is passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TrialRunner.run_simple_trainer")," method and will be called for each sample of the trials being run in the batch.\nThis is asynchronous with the actual running of the trials and uses the Cogment Datastore to retrieve the samples.\nIt is an ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncio")," coroutine."),(0,i.kt)("p",null,"e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def my_sampler_callback(sample, trial_parameters, model_registry) -> bool:\n    # ... Train model\n    continue_training = True\n    return continue_training\n")),(0,i.kt)("p",null,"The parameters received are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sample"),": ",(0,i.kt)("em",{parentName:"li"},"cogment.DatastoreSample")," - The is the sample that was received with all necessary data to train."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trial_parameters"),": ",(0,i.kt)("em",{parentName:"li"},"cogment.TrialParameters")," - These are the parameters of the trial from which the sample came from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"model_registry"),": ",(0,i.kt)("em",{parentName:"li"},"cogment.ModelRegistry")," - A common model registry for the whole batch being trained. The TrialRunner argument ",(0,i.kt)("inlineCode",{parentName:"li"},"model_registry_endpoint")," is used to retrieve this model registry.")),(0,i.kt)("p",null,"The expected return value is a ",(0,i.kt)("inlineCode",{parentName:"p"},"bool"),". If True, the training will continue normally. If False, the ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchTrainer")," will stop retrieving samples, the sampler callback will stop being called, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchTrainer")," will stop."))}d.isMDXComponent=!0}}]);