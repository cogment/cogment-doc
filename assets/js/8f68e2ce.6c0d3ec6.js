"use strict";(self.webpackChunkcogment_doc=self.webpackChunkcogment_doc||[]).push([[89],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5432:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:5},i="Launch",l={unversionedId:"reference/cli/launch",id:"reference/cli/launch",title:"Launch",description:"Launch is a utility command meant to facilitate locally launching and shutting down an entire Cogment project at once.",source:"@site/docs/reference/cli/launch.md",sourceDirName:"reference/cli",slug:"/reference/cli/launch",permalink:"/docs/reference/cli/launch",draft:!1,tags:[],version:"current",lastUpdatedAt:1688760034,formattedLastUpdatedAt:"Jul 7, 2023",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docSidebar",previous:{title:"Model Registry",permalink:"/docs/reference/cli/model-registry"},next:{title:"Python SDK",permalink:"/docs/reference/python"}},s={},p=[{value:"Command line",id:"command-line",level:2},{value:"definition file",id:"definition-file",level:2},{value:"Nodes",id:"nodes",level:3},{value:"Scripts",id:"scripts",level:4},{value:"Environment Variables",id:"environment-variables",level:5},{value:"Working folder",id:"working-folder",level:5},{value:"Quiet",id:"quiet",level:5},{value:"Global",id:"global",level:4},{value:"Environment Variables",id:"environment-variables-1",level:5},{value:"Working folder",id:"working-folder-1",level:5},{value:"Variable substitution",id:"variable-substitution",level:3},{value:"Example",id:"example",level:3}],c={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"launch"},"Launch"),(0,r.kt)("p",null,"Launch is a utility command meant to facilitate locally launching and shutting down an entire Cogment project at once."),(0,r.kt)("p",null,"When launch is used, a set of processes will be launched to run in parallel, as described by a ",(0,r.kt)("a",{parentName:"p",href:"#definition-file"},"YAML definition file"),".\nOnce any of these processes terminates, all other ones will be terminated as well."),(0,r.kt)("p",null,"The order of script launches is undefined, which is to say that they may not start in the order they are defined, and may not always start in the same order."),(0,r.kt)("h2",{id:"command-line"},"Command line"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cogment launch [options] filename [args...]")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"filename"),": Name (and path) of the YAML definition file describing the processes to launch."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"options"),":"),(0,r.kt)("p",null,"[-q]",", ","[--quiet]",': Disable some of the output generated by the launcher. Process output is never disabled by this option. To increase the level, more "q" can be added, up to ',(0,r.kt)("inlineCode",{parentName:"p"},"-qqq")," disabling all launcher generated output."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"args"),": These are arguments that will be used in ",(0,r.kt)("a",{parentName:"p",href:"#variable-substitution"},"variable substitution")," in the definition file."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cogment launch -qq ./launch.yaml 1000 8\n")),(0,r.kt)("h2",{id:"definition-file"},"definition file"),(0,r.kt)("p",null,"The launch definition file is a ",(0,r.kt)("a",{parentName:"p",href:"https://yaml.org"},"YAML")," formatted file where the details of the parallel processes to run are defined.\nThe file consists of at least a ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," top level node, and may also contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," top level node."),(0,r.kt)("h3",{id:"nodes"},"Nodes"),(0,r.kt)("h4",{id:"scripts"},"Scripts"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," node contains the details of the processes to run.\nEach node under ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," represents a process to run.\nThe name of the node becomes the identity of the process and serves to identify the process output."),(0,r.kt)("p",null,"Each process will run the contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"commands")," list in sequence (i.e. the next command will run when the previous terminates). Each command runs in an independent environment (e.g. environment variables set by one command will not be seen by the others)."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scripts:\n    process_a:  # The name of this process is "process_a"\n        commands:\n            - ["retrieve_db.sh"]\n            - ["python3", "env/main.py"]\n\n    process_b:  # The name of this process is "process_b"\n        commands:\n            - ["cogment", "service", "orchestrator"]\n')),(0,r.kt)("p",null,"The output will then look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-output"},"2023-06-30T22:24:08Z [TRACE ] [process_a:(1/2)] Launch [what:[retrieve_db.sh]]\n2023-06-30T22:24:08Z [stdout] [process_a:(1/2)] Retrieving default database...\n2023-06-30T22:24:08Z [stderr] [process_a:(1/2)] Record #2278 inconsistent\n2023-06-30T22:24:08Z [stdout] [process_a:(1/2)] Database retrieved in /app/sb/\n2023-06-30T22:24:08Z [TRACE ] [process_a:(1/2)] Script command completed\n...\n")),(0,r.kt)("p",null,'Where "TRACE" is trace level information from the launcher (it could also be "INFO" for more important information).\n"stdout", and "stderr" are the output from the process.\n"process_a" is the name given to the process in the definition file and "(1/2)" means that it is the first command out of two for that process.\nThe time is in RFC3339 format.'),(0,r.kt)("h5",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"You can set environment variables using the ",(0,r.kt)("inlineCode",{parentName:"p"},"environment")," node of the process.\nThese will be part of the environment of all commands in the process."),(0,r.kt)("p",null,"E.g:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scripts:\n    orchestrator:\n        environment:\n            COGMENT_ORCHESTRATOR_ACTOR_PORT: 9000\n            COGMENT_LIFECYCLE_PORT: 9000\n        commands:\n            - ["cogment", "services", "orchestrator"]\n')),(0,r.kt)("h5",{id:"working-folder"},"Working folder"),(0,r.kt)("p",null,"By default, the current working folder is set to the folder containing the launch script. You can override that behavior with the ",(0,r.kt)("inlineCode",{parentName:"p"},"folder")," node for each process."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scripts:\n    actor_alpha:\n        folder: ./actors/alpha\n        commands:\n            - ["python3", "main.py"]\n')),(0,r.kt)("h5",{id:"quiet"},"Quiet"),(0,r.kt)("p",null,"You can control the process output by setting this value to ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"False"),".\nBy default this is ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," and thus standard process output (stdout and stderr) are also output by the launcher.\nIf set to ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),", standard process output is ignored and not output by the launcher."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scripts:\n    setup:\n        quiet: True\n        commands:\n            - ["python3", "setup.py"]\n')),(0,r.kt)("h4",{id:"global"},"Global"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," node contains values that have a global scope (i.e. they affect all scripts defined in the file).\nSome of these values can be overridden by the individual scripts."),(0,r.kt)("h5",{id:"environment-variables-1"},"Environment Variables"),(0,r.kt)("p",null,"You can set global environment variables using the ",(0,r.kt)("inlineCode",{parentName:"p"},"environment")," node under the ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," node.\nThese variables will be part of the environment of all scripts, unless overridden locally in the script's own ",(0,r.kt)("inlineCode",{parentName:"p"},"environment")," node."),(0,r.kt)("p",null,"E.g:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n    environment:\n        COGMENT_LOG_LEVEL: info\n        COGMENT_DIRECTORY_ENDPOINT: grpc://server:9010\n")),(0,r.kt)("h5",{id:"working-folder-1"},"Working folder"),(0,r.kt)("p",null,"By default, the current working folder is set to the folder containing the definition file.\nThis can be changed with the ",(0,r.kt)("inlineCode",{parentName:"p"},"folder")," node under the ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," node.\nIt will affect all scripts, unless locally overridden by the script's own ",(0,r.kt)("inlineCode",{parentName:"p"},"folder")," node.\nEach level can also build on the previous one if the provided folder is a relative folder."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n    folder: ./app  # app folder where the definition file resides\nscripts:\n    local:\n        folder: ./inside  # This is './app/inside' from where the definition file resides\n    somewhere:\n        folder: /home/some  # This is an absolute path independent of previous folder settings\n")),(0,r.kt)("h3",{id:"variable-substitution"},"Variable substitution"),(0,r.kt)("p",null,"You can substitute environment variables using ",(0,r.kt)("inlineCode",{parentName:"p"},"{{.ENV_VAR}}")," anywhere in the ",(0,r.kt)("inlineCode",{parentName:"p"},"commands")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"environment")," values.\nEnvironment variables previously set in the definition file can also be substituted that way."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scripts:\n    say_hi:\n        environment:\n            TYPE: "How"\n            QUESTION: "{{.TYPE}} are you?"\n        commands:\n            - ["echo", "Hello, {{.USER}}. {{.QUESTION}}"]  # result: "Hello, XXX. How are you?"\n')),(0,r.kt)("p",null,"To print the literal double curly open brackets, surround them with backticks inside substitution brackets: ",(0,r.kt)("inlineCode",{parentName:"p"},"{{`{{`}}"),"."),(0,r.kt)("p",null,"You can also substitute the arguments from the command line of launch (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"cogment launch ./launch.yaml arg1 arg2 arg3"),") using ",(0,r.kt)("inlineCode",{parentName:"p"},"{{.__1}}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{{.__2}}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{{.__3}}"),", etc.\nNote that the ",(0,r.kt)("inlineCode",{parentName:"p"},"{{.__1}}")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"{{.__9}}")," are always defined, but will be empty if no corresponding argument was given on the command line.\nArguments 10 (",(0,r.kt)("inlineCode",{parentName:"p"},"{{.__10}}"),") and above will only be defined if they were provided on the command line."),(0,r.kt)("p",null,"Undefined values will be replaced with ",(0,r.kt)("inlineCode",{parentName:"p"},"<no value>"),"."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'scripts:\n    args_out:\n        environment:\n            NAME: foo\n        commands:\n            - ["echo", "{{`{{`}} brackets }}"]  # "{{ brackets }}"\n            - ["echo", "The first 3 CLI arguments are: {{.__1}} {{.__2}} {{.__3}}"]\n')),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'global:\n    environment:\n        RUN_NAME: "COGRUN-{{.HOSTNAME}}-{{.__1}}"\n        COGMENT_LOG_LEVEL: info\n        DIR_PORT: 9010\n        COGMENT_DIRECTORY_ENDPOINT: "grpc://server:{{.DIR_PORT}}"\n    folder: /app\n\nscripts:\n    directory:\n        folder: ./cogment\n        environment:\n            COGMENT_DIRECTORY_PORT: "{{.DIR_PORT}}"\n        commands:\n            - ["cogment", "services", "directory"]\n    orchestrator:\n        folder: ./cogment\n        environment:\n            COGMENT_ORCHESTRATOR_ACTOR_PORT: 0\n            COGMENT_LIFECYCLE_PORT: 0\n        commands:\n            - ["sleep", "1"]\n            - ["cogment", "services", "orchestrator"]\n    runner:\n        folder: ./pycode\n        commands:\n            - ["sleep", "1"]\n            - ["python3", "runner.py", "-u {{.USER}}", "-n {{.RUN_NAME}}", "{{.__2}}"]\n')))}d.isMDXComponent=!0}}]);